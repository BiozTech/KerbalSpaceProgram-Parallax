using ParallaxGrass;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

//CollisionHandler works by doing the following:
//1. Filter quads based on distance to get the nearest 4 quads to the craft
//2. Retrieve the data generated by DistributePoints in its AsyncGPUReadback method to prevent CPU blocking
//3. We only need the position data, so store it
//4. Depending on performance, sort the position data by distance in world space and create gameobjects for close points which will act as colliders
//5. Break, somewhere, but this step is optional

namespace Grass
{
    public class CollisionHandler   //A subset of QuadData, but separated into this file to make things easier
    {
        public GameObject[] objects;
        public Matrix4x4[] objectToWorld;      //Contains object positions, rotations and scales in world space
        public Mesh colliderMesh;
        public int gameObjectsPerFrame = 5;
        public bool cleaned = false;
        public Material dummyMat;
        public void CreateColliders()
        {
            dummyMat = new Material(Shader.Find("Standard"));
            objects = new GameObject[objectToWorld.Length];
            for (int i = 0; i < objectToWorld.Length; i++)
            {
                if (!cleaned)
                {
                    GameObject collider = new GameObject();
                    MeshFilter mf = collider.AddComponent<MeshFilter>();
                    MeshRenderer mr = collider.AddComponent<MeshRenderer>();
                    mf.sharedMesh = colliderMesh;
                    mr.sharedMaterial = dummyMat;
                    Vector3 pos = objectToWorld[i].GetColumn(3);
                    Quaternion rot = Quaternion.LookRotation(objectToWorld[i].GetColumn(2), objectToWorld[i].GetColumn(1));
                    Vector3 scale = new Vector3(objectToWorld[i].GetColumn(0).magnitude, objectToWorld[i].GetColumn(1).magnitude, objectToWorld[i].GetColumn(2).magnitude);
                    collider.transform.localScale = scale;
                    collider.transform.position = pos + Vector3.up * 0.1f;  //Also should get local pos and parent to quad or subtract shader offset or sm
                    collider.transform.rotation = rot;
                    collider.SetActive(true);

                    objects[i] = collider;
                }
                //if (i % gameObjectsPerFrame == 0) { yield return null; }
            }
        }
        public void Cleanup()
        {
            cleaned = true;
            for (int i = 0; i < objects.Length;i++)
            {
                UnityEngine.Object.Destroy(objects[i]);
            }
            
        }
    }
}
